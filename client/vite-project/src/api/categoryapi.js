import Category from '@models/category.js';

class CategoryAPI {
    static baseUrl = 'http://localhost:3003/api/categories';

    static getAuthHeader() {
        const token = localStorage.getItem('admin_token');
        return token ? { Authorization: 'Bearer ' + token } : {};
    }

    static async getAll() {
        try {
            console.log('üîó ƒêang g·ªçi API Categories getAll:', this.baseUrl);

            const res = await fetch(this.baseUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói Categories getAll:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ D·ªØ li·ªáu Categories getAll:', data);

            // X·ª≠ l√Ω response data
            const categories = data.data || data.categories || data || [];

            return Array.isArray(categories)
                ? categories.map((item) =>
                      Category && Category.fromApiResponse
                          ? Category.fromApiResponse(item)
                          : {
                                id: item.id,
                                name: item.name,
                                image: item.image,
                                createdAt: item.createdAt,
                                updatedAt: item.updatedAt,
                                ...item
                            }
                  )
                : [];
        } catch (error) {
            console.error('‚ùå L·ªói Categories getAll:', error);
            throw new Error('L·ªói khi t·∫£i danh s√°ch danh m·ª•c: ' + error.message);
        }
    }

    static async getPaging({ page = 1, search = '' } = {}) {
        try {
            const url = `${this.baseUrl}?search=${encodeURIComponent(
                search
            )}&page=${page}`;
            console.log('üîó ƒêang g·ªçi API Categories Paging:', url);

            const res = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });
            console.log(
                'üìä Categories Paging Status:',
                res.status,
                res.statusText
            );

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói t·ª´ server Categories:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Categories Paging Data:', data);
            const response = {
                data: data.data || [],
                pagination: {
                    currentPage: data.currentPage || parseInt(page),
                    totalPage: data.totalPage || 1,
                    totalItems: data.totalCategories || data.totalItems || 0,
                    limit: Math.ceil(
                        (data.totalCategories || 0) / (data.totalPage || 1)
                    )
                }
            };

            return response;
        } catch (error) {
            console.error('‚ùå L·ªói trong Categories getPaging:', error);
            throw error;
        }
    }

    static async getById(id) {
        try {
            console.log('üîó ƒêang t·∫£i danh m·ª•c:', id);

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói getById Category:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Category getById data:', data);

            const categoryResponse = data.data || data.category || data;
            return Category.fromApiResponse(categoryResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong getById Category:', error);
            throw new Error('L·ªói khi t·∫£i danh m·ª•c: ' + error.message);
        }
    }

    static async create(categoryData) {
        try {
            console.log('üîó ƒêang t·∫°o danh m·ª•c:', categoryData);

            // ‚úÖ N·∫øu l√† Category instance, s·ª≠ d·ª•ng toApiFormat
            const payload =
                categoryData instanceof Category
                    ? categoryData.toApiFormat()
                    : categoryData;

            const res = await fetch(this.baseUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                },
                body: JSON.stringify(payload)
            });

            console.log('üìä Create Category Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói t·∫°o danh m·ª•c:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Create Response:', data);

            // ‚úÖ Convert response th√†nh Category instance
            const categoryResponse = data.data || data.category || data;
            return Category.fromApiResponse(categoryResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong create Category:', error);
            throw error;
        }
    }

    static async update(id, categoryData) {
        try {
            console.log('üîó ƒêang c·∫≠p nh·∫≠t danh m·ª•c:', id, categoryData);

            // ‚úÖ N·∫øu l√† Category instance, s·ª≠ d·ª•ng toApiFormat
            const payload =
                categoryData instanceof Category
                    ? categoryData.toApiFormat()
                    : categoryData;

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                },
                body: JSON.stringify(payload)
            });

            console.log('üìä Update Category Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói c·∫≠p nh·∫≠t danh m·ª•c:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Update Response:', data);

            // ‚úÖ Convert response th√†nh Category instance
            const categoryResponse = data.data || data.category || data;
            return Category.fromApiResponse(categoryResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong update Category:', error);
            throw error;
        }
    }

    static async delete(id) {
        try {
            console.log('üîó ƒêang x√≥a danh m·ª•c:', id);

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            console.log('üìä Delete Category Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói x√≥a danh m·ª•c:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Danh m·ª•c ƒë√£ x√≥a:', data);

            return data.data || data.category || data;
        } catch (error) {
            console.error('‚ùå L·ªói trong delete Category:', error);
            throw error;
        }
    }
}

export default CategoryAPI;
