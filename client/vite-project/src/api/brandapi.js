import Brand from '@models/brand.js';

class BrandAPI {
    static baseUrl = 'http://localhost:3003/api/brands';

    static getAuthHeader() {
        const token = localStorage.getItem('admin_token');
        return token ? { Authorization: 'Bearer ' + token } : {};
    }

    static async getAll() {
        try {
            console.log('üîó ƒêang g·ªçi API Brands getAll:', this.baseUrl);

            const res = await fetch(this.baseUrl, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói Brands getAll:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ D·ªØ li·ªáu Brands getAll:', data);

            // X·ª≠ l√Ω response data
            const brands = data.data || data.brands || data || [];

            return Array.isArray(brands)
                ? brands.map((item) =>
                      Brand && Brand.fromApiResponse
                          ? Brand.fromApiResponse(item)
                          : {
                                id: item.id,
                                name: item.name,
                                image: item.image,
                                createdAt: item.createdAt,
                                updatedAt: item.updatedAt,
                                ...item
                            }
                  )
                : [];
        } catch (error) {
            console.error('‚ùå L·ªói Brands getAll:', error);
            throw new Error(
                'L·ªói khi t·∫£i danh s√°ch th∆∞∆°ng hi·ªáu: ' + error.message
            );
        }
    }

    static async getPaging({ page = 1, search = '' } = {}) {
        try {
            const url = `${this.baseUrl}?search=${encodeURIComponent(
                search
            )}&page=${page}`;
            console.log('üîó ƒêang g·ªçi API Brands Paging:', url);

            const res = await fetch(url, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });
            console.log('üìä Brands Paging Status:', res.status, res.statusText);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói t·ª´ server Brands:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Brands Paging Data:', data);

            const response = {
                data: data.data || [],
                pagination: {
                    currentPage: data.currentPage || parseInt(page),
                    totalPage: data.totalPage || 1,
                    totalItems: data.totalBrands || data.totalItems || 0,
                    limit: Math.ceil(
                        (data.totalBrands || 0) / (data.totalPage || 1)
                    )
                }
            };

            return response;
        } catch (error) {
            console.error('‚ùå L·ªói trong Brands getPaging:', error);
            throw error;
        }
    }

    static async getById(id) {
        try {
            console.log('üîó ƒêang t·∫£i th∆∞∆°ng hi·ªáu:', id);

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói getById Brand:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Brand getById data:', data);

            const brandResponse = data.data || data.brand || data;
            return Brand.fromApiResponse(brandResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong getById Brand:', error);
            throw new Error('L·ªói khi t·∫£i th∆∞∆°ng hi·ªáu: ' + error.message);
        }
    }

    static async create(brandData) {
        try {
            console.log('üîó ƒêang t·∫°o th∆∞∆°ng hi·ªáu:', brandData);

            // ‚úÖ N·∫øu l√† Brand instance, s·ª≠ d·ª•ng toApiFormat
            const payload =
                brandData instanceof Brand
                    ? brandData.toApiFormat()
                    : brandData;

            const res = await fetch(this.baseUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                },
                body: JSON.stringify(payload)
            });

            console.log('üìä Create Brand Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói t·∫°o th∆∞∆°ng hi·ªáu:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Create Response:', data);

            // ‚úÖ Convert response th√†nh Brand instance
            const brandResponse = data.data || data.brand || data;
            return Brand.fromApiResponse(brandResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong create Brand:', error);
            throw error;
        }
    }

    static async update(id, brandData) {
        try {
            console.log('üîó ƒêang c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:', id, brandData);

            // ‚úÖ N·∫øu l√† Brand instance, s·ª≠ d·ª•ng toApiFormat
            const payload =
                brandData instanceof Brand
                    ? brandData.toApiFormat()
                    : brandData;

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                },
                body: JSON.stringify(payload)
            });

            console.log('üìä Update Brand Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th∆∞∆°ng hi·ªáu:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Raw Update Response:', data);

            // ‚úÖ Convert response th√†nh Brand instance
            const brandResponse = data.data || data.brand || data;
            return Brand.fromApiResponse(brandResponse);
        } catch (error) {
            console.error('‚ùå L·ªói trong update Brand:', error);
            throw error;
        }
    }

    static async delete(id) {
        try {
            console.log('üîó ƒêang x√≥a th∆∞∆°ng hi·ªáu:', id);

            const res = await fetch(`${this.baseUrl}/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    ...this.getAuthHeader()
                }
            });

            console.log('üìä Delete Brand Status:', res.status);

            if (!res.ok) {
                const errorText = await res.text();
                console.error('‚ùå L·ªói x√≥a th∆∞∆°ng hi·ªáu:', errorText);
                throw new Error(`HTTP ${res.status}: ${errorText}`);
            }

            const data = await res.json();
            console.log('‚úÖ Th∆∞∆°ng hi·ªáu ƒë√£ x√≥a:', data);

            return data.data || data.brand || data;
        } catch (error) {
            console.error('‚ùå L·ªói trong delete Brand:', error);
            throw error;
        }
    }
}

export default BrandAPI;
