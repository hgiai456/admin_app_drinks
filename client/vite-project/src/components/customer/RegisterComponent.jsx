import React, { useState } from 'react';
import UserAPI from '@api/userapi';
import User from '@models/user';
import '@styles/pages/_register.scss';

export default function RegisterComponent({ onRegisterSuccess }) {
    const [formData, setFormData] = useState({
        email: '',
        password: '',
        confirmPassword: '',
        name: '',
        phone: '',
        address: ''
    });

    const [errors, setErrors] = useState({});
    const [loading, setLoading] = useState(false);
    const [message, setMessage] = useState('');

    const validateEmail = (email) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    };

    const validatePhone = (phone) => {
        const phoneRegex = /^[0-9]{10,11}$/;
        return phoneRegex.test(phone);
    };

    const validatePassword = (password) => {
        return password.length >= 6;
    };

    const validateForm = () => {
        const newErrors = {};

        // Email validation
        if (!formData.email.trim()) {
            newErrors.email = 'Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (!validateEmail(formData.email)) {
            newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
        }

        // Password validation
        if (!formData.password) {
            newErrors.password = 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (!validatePassword(formData.password)) {
            newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
        }

        // Confirm password validation
        if (!formData.confirmPassword) {
            newErrors.confirmPassword = 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u';
        } else if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'M·∫≠t kh·∫©u kh√¥ng kh·ªõp';
        }

        // Name validation
        if (!formData.name.trim()) {
            newErrors.name = 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (formData.name.trim().length < 2) {
            newErrors.name = 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
        }

        // Phone validation
        if (!formData.phone.trim()) {
            newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        } else if (!validatePhone(formData.phone)) {
            newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá (10-11 s·ªë)';
        }

        // Address validation
        if (!formData.address.trim()) {
            newErrors.address = 'ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleInputChange = (field, value) => {
        setFormData((prev) => ({
            ...prev,
            [field]: value
        }));

        //X√≥a th√¥ng b√°o l·ªói khi m√† ng∆∞·ªùi d√πng nh·∫≠p
        if (errors[field]) {
            setErrors((prev) => ({
                ...prev,
                [field]: ''
            }));
        }

        if (message) setMessage('');
    };
    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!validateForm()) {
            setMessage('‚ùå Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin');
            return;
        }
        setLoading(true);
        setMessage('');

        try {
            console.log('üîÑ ƒêang ƒëƒÉng k√Ω t√†i kho·∫£n v·ªõi d·ªØ li·ªáu:', formData);

            const userData = {
                email: formData.email.trim(),
                password: formData.password,
                name: formData.name.trim(),
                phone: formData.phone.trim(),
                address: formData.address.trim()
            };

            const newUser = await UserAPI.create(userData);

            console.log('‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng:', newUser);

            setMessage('‚úÖ ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!');
            setFormData({
                email: '',
                password: '',
                confirmPassword: '',
                name: '',
                phone: '',
                address: ''
            }); //Reset form clear data
            setErrors({});

            if (onRegisterSuccess) {
                setTimeout(() => {
                    onRegisterSuccess(newUser);
                }, 1500);
            }
        } catch (error) {
            console.error('‚ùå L·ªói ƒëƒÉng k√Ω:', error);

            let errorMessage = 'ƒêƒÉng k√Ω th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.';

            if (error.message.includes('400')) {
                errorMessage = 'Th√¥ng tin kh√¥ng h·ª£p l·ªá';
            } else if (error.message.includes('409')) {
                errorMessage = 'Email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng';
            } else if (error.message.includes('500')) {
                errorMessage = 'L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau';
            }
            setMessage(`‚ùå ${errorMessage}`);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className='register-container'>
            <div className='register-background'>
                <div className='bg-shapes'>
                    <div className='shape shape-1'></div>
                    <div className='shape shape-2'></div>
                    <div className='shape shape-3'></div>
                    <div className='shape shape-4'></div>
                </div>
            </div>

            <div className='register-content'>
                <form className='register-form' onSubmit={handleSubmit}>
                    {/* Header */}
                    <div className='register-header'>
                        <div className='logo-container'>
                            <img
                                src='https://firebasestorage.googleapis.com/v0/b/hg-store-a11c5.firebasestorage.app/o/images%2F1751092040674-logo.png?alt=media&token=4b72bf76-9c9c-4257-9290-808098ceac2f'
                                alt='Logo'
                                className='register-logo'
                                onError={(e) => {
                                    e.target.style.display = 'none';
                                }}
                            />
                        </div>
                        <h1 className='register-title'>ƒêƒÉng k√Ω t√†i kho·∫£n</h1>
                        <p className='register-subtitle'>
                            T·∫°o t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• c·ªßa ch√∫ng t√¥i
                        </p>
                    </div>

                    {/* Message */}
                    {message && (
                        <div
                            className={`register-message ${
                                message.includes('‚úÖ')
                                    ? 'success-message'
                                    : 'error-message'
                            }`}
                        >
                            <span className='message-icon'>
                                {message.includes('‚úÖ') ? '‚úÖ' : '‚ö†Ô∏è'}
                            </span>
                            <span className='message-text'>{message}</span>
                        </div>
                    )}

                    {/* Form Fields */}
                    <div className='form-fields'>
                        {/* Email */}
                        <div className='form-group'>
                            <label className='form-label'>
                                Email <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <input
                                    type='email'
                                    value={formData.email}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'email',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ email...'
                                    className={`form-input ${
                                        errors.email ? 'error' : ''
                                    }`}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.email && (
                                <span className='field-error'>
                                    {errors.email}
                                </span>
                            )}
                        </div>

                        {/* Name */}
                        <div className='form-group'>
                            <label className='form-label'>
                                H·ªç v√† t√™n <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <input
                                    type='text'
                                    value={formData.name}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'name',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p h·ªç v√† t√™n...'
                                    className={`form-input ${
                                        errors.name ? 'error' : ''
                                    }`}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.name && (
                                <span className='field-error'>
                                    {errors.name}
                                </span>
                            )}
                        </div>

                        {/* Phone */}
                        <div className='form-group'>
                            <label className='form-label'>
                                S·ªë ƒëi·ªán tho·∫°i{' '}
                                <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <input
                                    type='tel'
                                    value={formData.phone}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'phone',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i...'
                                    className={`form-input ${
                                        errors.phone ? 'error' : ''
                                    }`}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.phone && (
                                <span className='field-error'>
                                    {errors.phone}
                                </span>
                            )}
                        </div>

                        {/* Address */}
                        <div className='form-group'>
                            <label className='form-label'>
                                ƒê·ªãa ch·ªâ <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <textarea
                                    value={formData.address}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'address',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ...'
                                    className={`form-input form-textarea ${
                                        errors.address ? 'error' : ''
                                    }`}
                                    rows={3}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.address && (
                                <span className='field-error'>
                                    {errors.address}
                                </span>
                            )}
                        </div>

                        {/* Password */}
                        <div className='form-group'>
                            <label className='form-label'>
                                M·∫≠t kh·∫©u <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <input
                                    type='password'
                                    value={formData.password}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'password',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)...'
                                    className={`form-input ${
                                        errors.password ? 'error' : ''
                                    }`}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.password && (
                                <span className='field-error'>
                                    {errors.password}
                                </span>
                            )}
                        </div>

                        {/* Confirm Password */}
                        <div className='form-group'>
                            <label className='form-label'>
                                X√°c nh·∫≠n m·∫≠t kh·∫©u{' '}
                                <span className='required'>*</span>
                            </label>
                            <div className='input-wrapper'>
                                <input
                                    type='password'
                                    value={formData.confirmPassword}
                                    onChange={(e) =>
                                        handleInputChange(
                                            'confirmPassword',
                                            e.target.value
                                        )
                                    }
                                    disabled={loading}
                                    placeholder='Nh·∫≠p l·∫°i m·∫≠t kh·∫©u...'
                                    className={`form-input ${
                                        errors.confirmPassword ? 'error' : ''
                                    }`}
                                />
                                <div className='input-border'></div>
                            </div>
                            {errors.confirmPassword && (
                                <span className='field-error'>
                                    {errors.confirmPassword}
                                </span>
                            )}
                        </div>
                    </div>

                    {/* Submit Button */}
                    <button
                        type='submit'
                        disabled={loading}
                        className='register-submit-btn'
                    >
                        <span className='btn-content'>
                            {loading ? (
                                <>
                                    <span className='btn-spinner'>‚è≥</span>
                                    <span className='btn-text'>
                                        ƒêang ƒëƒÉng k√Ω...
                                    </span>
                                </>
                            ) : (
                                <>
                                    <span className='btn-text'>
                                        ƒêƒÉng k√Ω t√†i kho·∫£n
                                    </span>
                                </>
                            )}
                        </span>
                        <div className='btn-ripple'></div>
                    </button>

                    {/* Back to Login Link */}
                    <div className='register-footer'>
                        <p className='footer-text'>
                            ƒê√£ c√≥ t√†i kho·∫£n?
                            <button
                                type='button'
                                onClick={() =>
                                    onRegisterSuccess && onRegisterSuccess(null)
                                }
                                className='login-link'
                                disabled={loading}
                            >
                                ƒêƒÉng nh·∫≠p ngay
                            </button>
                        </p>
                    </div>
                </form>
            </div>
        </div>
    );
}
